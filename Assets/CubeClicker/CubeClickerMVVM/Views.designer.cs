// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CubeClicker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UniRx;
    using UnityEngine;
    using CubeClicker;
    
    
    public class TitleViewBase : uFrame.MVVM.ViewBase {
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(TitleViewModel);
            }
        }
        
        public TitleViewModel Title {
            get {
                return (TitleViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as TitleViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Title to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
        
        public virtual void ExecuteGameStart() {
            Title.GameStart.OnNext(new GameStartCommand() { Sender = Title });
        }
        
        public virtual void ExecuteGameStart(GameStartCommand command) {
            command.Sender = Title;
            Title.GameStart.OnNext(command);
        }
    }
    
    public class CubeViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _Id;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public CubeClicker.Logic.CubeType _Type;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _Point;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Single _AddTime;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Single _Expire;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CubeViewModel);
            }
        }
        
        public CubeViewModel Cube {
            get {
                return (CubeViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CubeViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var cubeview = ((CubeViewModel)model);
            cubeview.Id = this._Id;
            cubeview.Type = this._Type;
            cubeview.Point = this._Point;
            cubeview.AddTime = this._AddTime;
            cubeview.Expire = this._Expire;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Cube to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
        
        public virtual void ExecuteClickCube() {
            Cube.ClickCube.OnNext(new ClickCubeCommand() { Sender = Cube });
        }
        
        public virtual void ExecuteExpireCube() {
            Cube.ExpireCube.OnNext(new ExpireCubeCommand() { Sender = Cube });
        }
        
        public virtual void ExecuteClickCube(ClickCubeCommand command) {
            command.Sender = Cube;
            Cube.ClickCube.OnNext(command);
        }
        
        public virtual void ExecuteExpireCube(ExpireCubeCommand command) {
            command.Sender = Cube;
            Cube.ExpireCube.OnNext(command);
        }
    }
    
    public class CubeSpawnViewBase : uFrame.MVVM.ViewBase {
        
        [UFToggleGroup("Cubes")]
        [UnityEngine.HideInInspector()]
        public bool _BindCubes = true;
        
        [UFGroup("Cubes")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Cubesparent")]
        protected UnityEngine.Transform _CubesParent;
        
        [UFGroup("Cubes")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_CubesviewFirst")]
        protected bool _CubesViewFirst;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(CubeSpawnViewModel);
            }
        }
        
        public CubeSpawnViewModel CubeSpawn {
            get {
                return (CubeSpawnViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as CubeSpawnViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.CubeSpawn to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindCubes) {
                this.BindCollection(this.CubeSpawn.Cubes, this.CubesOnAdd, this.CubesOnRemove);
            }
            if (_BindCubes) {
                this.BindToViewCollection(this.CubeSpawn.Cubes, this.CubesCreateView, this.CubesAdded, this.CubesRemoved, _CubesParent, _CubesViewFirst);
            }
        }
        
        public virtual void CubesOnAdd(CubeViewModel arg1) {
        }
        
        public virtual void CubesOnRemove(CubeViewModel arg1) {
        }
        
        public virtual uFrame.MVVM.ViewBase CubesCreateView(uFrame.MVVM.ViewModel viewModel) {
            return InstantiateView(viewModel);
        }
        
        public virtual void CubesAdded(uFrame.MVVM.ViewBase view) {
        }
        
        public virtual void CubesRemoved(uFrame.MVVM.ViewBase view) {
        }
    }
    
    public class GameHUDViewBase : uFrame.MVVM.ViewBase {
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Single _TimeLimit;
        
        [UnityEngine.SerializeField()]
        [UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _Score;
        
        [UFToggleGroup("Score")]
        [UnityEngine.HideInInspector()]
        public bool _BindScore = true;
        
        [UFGroup("Score")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_ScoreonlyWhenChanged")]
        protected bool _ScoreOnlyWhenChanged;
        
        [UFToggleGroup("TimeLimit")]
        [UnityEngine.HideInInspector()]
        public bool _BindTimeLimit = true;
        
        [UFGroup("TimeLimit")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_TimeLimitonlyWhenChanged")]
        protected bool _TimeLimitOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(GameHUDViewModel);
            }
        }
        
        public GameHUDViewModel GameHUD {
            get {
                return (GameHUDViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as GameHUDViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var gamehudview = ((GameHUDViewModel)model);
            gamehudview.TimeLimit = this._TimeLimit;
            gamehudview.Score = this._Score;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.GameHUD to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindScore) {
                this.BindProperty(this.GameHUD.ScoreProperty, this.ScoreChanged, _ScoreOnlyWhenChanged);
            }
            if (_BindTimeLimit) {
                this.BindProperty(this.GameHUD.TimeLimitProperty, this.TimeLimitChanged, _TimeLimitOnlyWhenChanged);
            }
        }
        
        public virtual void ScoreChanged(Int32 arg1) {
        }
        
        public virtual void TimeLimitChanged(Single arg1) {
        }
    }
}
