// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace CubeClicker {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.Serialization;
    using UnityEngine;
    using UniRx;
    using CubeClicker;
    
    
    public partial class TitleViewModelBase : uFrame.MVVM.ViewModel {
        
        private Signal<GameStartCommand> _GameStart;
        
        public TitleViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual Signal<GameStartCommand> GameStart {
            get {
                return _GameStart;
            }
            set {
                _GameStart = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.GameStart = new Signal<GameStartCommand>(this);
        }
        
        public virtual void ExecuteGameStart() {
            this.GameStart.OnNext(new GameStartCommand());
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("GameStart", GameStart) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
        }
    }
    
    public partial class TitleViewModel {
        
        public TitleViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class CubeViewModelBase : uFrame.MVVM.ViewModel {
        
        private P<String> _IdProperty;
        
        private P<CubeClicker.Logic.CubeType> _TypeProperty;
        
        private P<Int32> _PointProperty;
        
        private P<Single> _AddTimeProperty;
        
        private P<Single> _ExpireProperty;
        
        private Signal<ClickCubeCommand> _ClickCube;
        
        private Signal<ExpireCubeCommand> _ExpireCube;
        
        public CubeViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<String> IdProperty {
            get {
                return _IdProperty;
            }
            set {
                _IdProperty = value;
            }
        }
        
        public virtual P<CubeClicker.Logic.CubeType> TypeProperty {
            get {
                return _TypeProperty;
            }
            set {
                _TypeProperty = value;
            }
        }
        
        public virtual P<Int32> PointProperty {
            get {
                return _PointProperty;
            }
            set {
                _PointProperty = value;
            }
        }
        
        public virtual P<Single> AddTimeProperty {
            get {
                return _AddTimeProperty;
            }
            set {
                _AddTimeProperty = value;
            }
        }
        
        public virtual P<Single> ExpireProperty {
            get {
                return _ExpireProperty;
            }
            set {
                _ExpireProperty = value;
            }
        }
        
        public virtual String Id {
            get {
                return IdProperty.Value;
            }
            set {
                IdProperty.Value = value;
            }
        }
        
        public virtual CubeClicker.Logic.CubeType Type {
            get {
                return TypeProperty.Value;
            }
            set {
                TypeProperty.Value = value;
            }
        }
        
        public virtual Int32 Point {
            get {
                return PointProperty.Value;
            }
            set {
                PointProperty.Value = value;
            }
        }
        
        public virtual Single AddTime {
            get {
                return AddTimeProperty.Value;
            }
            set {
                AddTimeProperty.Value = value;
            }
        }
        
        public virtual Single Expire {
            get {
                return ExpireProperty.Value;
            }
            set {
                ExpireProperty.Value = value;
            }
        }
        
        public virtual Signal<ClickCubeCommand> ClickCube {
            get {
                return _ClickCube;
            }
            set {
                _ClickCube = value;
            }
        }
        
        public virtual Signal<ExpireCubeCommand> ExpireCube {
            get {
                return _ExpireCube;
            }
            set {
                _ExpireCube = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.ClickCube = new Signal<ClickCubeCommand>(this);
            this.ExpireCube = new Signal<ExpireCubeCommand>(this);
            _IdProperty = new P<String>(this, "Id");
            _TypeProperty = new P<CubeClicker.Logic.CubeType>(this, "Type");
            _PointProperty = new P<Int32>(this, "Point");
            _AddTimeProperty = new P<Single>(this, "AddTime");
            _ExpireProperty = new P<Single>(this, "Expire");
        }
        
        public virtual void ExecuteClickCube() {
            this.ClickCube.OnNext(new ClickCubeCommand());
        }
        
        public virtual void ExecuteExpireCube() {
            this.ExpireCube.OnNext(new ExpireCubeCommand());
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            this.Point = stream.DeserializeInt("Point");;
            this.AddTime = stream.DeserializeFloat("AddTime");;
            this.Expire = stream.DeserializeFloat("Expire");;
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeInt("Point", this.Point);
            stream.SerializeFloat("AddTime", this.AddTime);
            stream.SerializeFloat("Expire", this.Expire);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("ClickCube", ClickCube) { ParameterType = typeof(void) });
            list.Add(new ViewModelCommandInfo("ExpireCube", ExpireCube) { ParameterType = typeof(void) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_IdProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_TypeProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_PointProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_AddTimeProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_ExpireProperty, false, false, false, false));
        }
    }
    
    public partial class CubeViewModel {
        
        public CubeViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class GameHUDViewModelBase : uFrame.MVVM.ViewModel {
        
        private P<Single> _TimeLimitProperty;
        
        private P<Int32> _ScoreProperty;
        
        public GameHUDViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<Single> TimeLimitProperty {
            get {
                return _TimeLimitProperty;
            }
            set {
                _TimeLimitProperty = value;
            }
        }
        
        public virtual P<Int32> ScoreProperty {
            get {
                return _ScoreProperty;
            }
            set {
                _ScoreProperty = value;
            }
        }
        
        public virtual Single TimeLimit {
            get {
                return TimeLimitProperty.Value;
            }
            set {
                TimeLimitProperty.Value = value;
            }
        }
        
        public virtual Int32 Score {
            get {
                return ScoreProperty.Value;
            }
            set {
                ScoreProperty.Value = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _TimeLimitProperty = new P<Single>(this, "TimeLimit");
            _ScoreProperty = new P<Int32>(this, "Score");
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            this.TimeLimit = stream.DeserializeFloat("TimeLimit");;
            this.Score = stream.DeserializeInt("Score");;
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeFloat("TimeLimit", this.TimeLimit);
            stream.SerializeInt("Score", this.Score);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_TimeLimitProperty, false, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_ScoreProperty, false, false, false, false));
        }
    }
    
    public partial class GameHUDViewModel {
        
        public GameHUDViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
    
    public partial class CubeSpawnViewModelBase : uFrame.MVVM.ViewModel {
        
        private ModelCollection<CubeViewModel> _Cubes;
        
        public CubeSpawnViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual ModelCollection<CubeViewModel> Cubes {
            get {
                return _Cubes;
            }
            set {
                _Cubes = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            _Cubes = new ModelCollection<CubeViewModel>(this, "Cubes");
        }
        
        public override void Read(ISerializerStream stream) {
            base.Read(stream);
            if (stream.DeepSerialize) {
                this.Cubes.Clear();
                this.Cubes.AddRange(stream.DeserializeObjectArray<CubeViewModel>("Cubes"));
            }
        }
        
        public override void Write(ISerializerStream stream) {
            base.Write(stream);
            if (stream.DeepSerialize) stream.SerializeArray("Cubes", this.Cubes);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModelCommandInfo> list) {
            base.FillCommands(list);
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            list.Add(new ViewModelPropertyInfo(_Cubes, true, true, false, false));
        }
    }
    
    public partial class CubeSpawnViewModel {
        
        public CubeSpawnViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
